AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation: ALB + EC2 (MV1, MV2, DB, Ingesta) with Docker Compose"

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair name to access the EC2 instances
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
    Description: EC2 instance type
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC ID
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: At least 2 public subnets in different Availability Zones

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, SSH, and MySQL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  # ---------- Launch Template for MV1 / MV2 ----------
  LaunchTemplateMV:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ImageId: ami-092c1558140ceb19d
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git docker
            systemctl enable docker
            systemctl start docker
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            cd /home/ec2-user
            git clone https://github.com/warleon/cloud-computing-project.git
            cd cloud-computing-project
            docker-compose --profile loadBalanced up -d

  # ---------- Launch Template for Database ----------
  LaunchTemplateDB:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ImageId: ami-092c1558140ceb19d
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git docker
            systemctl enable docker
            systemctl start docker
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            cd /home/ec2-user
            git clone https://github.com/warleon/cloud-computing-project.git
            cd cloud-computing-project
            docker-compose --profile database up -d

  # ---------- Launch Template for Ingesta ----------
  LaunchTemplateIngesta:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ImageId: ami-092c1558140ceb19d
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git docker
            systemctl enable docker
            systemctl start docker
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            cd /home/ec2-user
            git clone https://github.com/warleon/cloud-computing-project.git
            cd cloud-computing-project
            docker-compose --profile ingest up -d

  # ---------- EC2 Instances ----------
  InstanceMV1:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateMV
        Version: !GetAtt LaunchTemplateMV.LatestVersionNumber
      SubnetId: !Select [0, !Ref Subnets] # AZ1

  InstanceMV2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateMV
        Version: !GetAtt LaunchTemplateMV.LatestVersionNumber
      SubnetId: !Select [1, !Ref Subnets] # AZ2

  InstanceDB:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateDB
        Version: !GetAtt LaunchTemplateDB.LatestVersionNumber
      SubnetId: !Select [0, !Ref Subnets]

  InstanceIngesta:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateIngesta
        Version: !GetAtt LaunchTemplateIngesta.LatestVersionNumber
      SubnetId: !Select [1, !Ref Subnets]

  # ---------- Application Load Balancer ----------
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets: !Ref Subnets # attach to multiple subnets (multi-AZ)
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application

  TargetGroupMV:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref InstanceMV1
        - Id: !Ref InstanceMV2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupMV

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName
