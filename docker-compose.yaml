services:
  ms1:
    build:
      context: ./cloud-computing-project-ms-1
      dockerfile: Dockerfile
    image: dynast4/cloud-computing-project-ms-1:latest
    container_name: ms1
    ports:
      - "5001:3000"
    environment:
      - PORT=3000
      - MONGODB_URI="${MS1_MONGODB_URI}"
      - MS2_ACCOUNTS_URL="${MS2_ACCOUNTS_URL}"
      - MS4_COMPLIANCE_URL="${MS4_COMPLIANCE_URL}"
      - RATE_LIMIT_WINDOW_MS="${MS1_RATE_LIMIT_WINDOW_MS}"
      - RATE_LIMIT_MAX_REQUESTS="${MS1_RATE_LIMIT_MAX_REQUESTS}"
    networks:
      - ms1
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - ms1
      - loadBalanced

  ms2:
    build:
      context: ./cloud-computing-project-ms-2
      dockerfile: Dockerfile
    image: warleon/cloud-computing-project-ms-2:latest
    container_name: ms2
    ports:
      - "5002:3000"
    profiles:
      - loadBalanced
      - ms2
    networks:
      - ms2

  ms3:
    build:
      context: ./cloud-computing-project-ms-3
      dockerfile: Dockerfile
    image: warleon/cloud-computing-project-ms-3:latest
    container_name: ms3
    ports:
      - "5003:3000"
    environment:
      - PORT=3000
      - MS2_URL="${MS2_URL}"
      - MS2_SERVICE_KEY="${MS2_SERVICE_KEY}"
      - MS4_URL="${MS4_COMPLIANCE_URL}"
    profiles:
      - loadBalanced
      - ms3

  ms4:
    build:
      context: ./cloud-computing-project-ms-4
      dockerfile: Dockerfile
    image: warleon/cloud-computing-project-ms-4:latest
    environment:
      DB_PASSWORD: "${MS4_DB_ROOT_PASSWORD}"
      DB_NAME: "${MS4_DB_ROOT_DB}"
      DB_USER: root
      DB_PORT: 3306
      DB_HOST: "${MS4_DB_HOST:-mysql}"
      GIN_MODE: release
    container_name: ms4
    ports:
      - "5004:8080"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8080/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    profiles:
      - loadBalanced
      - ms4
      - ms4-dev
    networks:
      - ms4

  ms5:
    build:
      context: ./cloud-computing-project-ms-5/api-consultas
      dockerfile: Dockerfile
    image: warleon/cloud-computing-project-ms-5:latest
    container_name: ms5
    ports:
      - "5005:8000"
    profiles:
      - ms5
      - ingest
    environment:
      # AWS Configuration
      - AWS_DEFAULT_REGION=${MS5_AWS_DEFAULT_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${MS5_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${MS5_AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${MS5_AWS_SESSION_TOKEN}
      # Athena Configuration
      - ATHENA_DATABASE=${MS5_ATHENA_DATABASE:-datalake_raw}
      - ATHENA_OUTPUT_LOCATION=${MS5_ATHENA_OUTPUT_LOCATION}
      - ATHENA_WORKGROUP=${MS5_ATHENA_WORKGROUP:-primary}
      # API Configuration
      - API_HOST=${MS5_API_HOST:-0.0.0.0}
      - API_PORT=${MS5_API_PORT:-8000}
      - API_RELOAD=${MS5_API_RELOAD:-false}
      # Logging
      - LOG_LEVEL=${MS5_LOG_LEVEL:-INFO}

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: "${MS4_DB_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MS4_DB_ROOT_DB}"
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    profiles:
      - ms4
      - ms4-dev
      - database
    networks:
      - ms4
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MS4_DB_ROOT_PASSWORD}",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:7-jammy
    container_name: ms1-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MS2_INIT_DB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MS2_INIT_DB_ROOT_PASSWORD:-password123}
      - MONGO_INITDB_DATABASE=${MS1_DB_NAME:-customer_service_database}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ms1
    restart: unless-stopped
    profiles:
      - ms1
      - ms1-dev
      - database

  postgres:
    image: postgres:15
    container_name: ms2_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${MS2_DB_USER:-ms2}
      POSTGRES_PASSWORD: ${MS2_DB_PASSWORD:-secret}
      POSTGRES_DB: ${MS2_DB_NAME:-ms2_accounts}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ms2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ms2 -d ms2_accounts"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - ms2
      - ms2-dev
      - database

volumes:
  mysql-data:
    driver: local
  mongodb_data:
    driver: local
  postgres_data:
    driver: local

networks:
  ms4:
    driver: bridge
  ms1:
    driver: bridge
  ms2:
    driver: bridge
